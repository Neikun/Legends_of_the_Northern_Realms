-- This file has been generated by Dungeon Editor 1.3.6

--- level 1 ---

mapName("Unnamed")
setWallSet("dungeon")
playStream("assets/samples/music/dungeon_ambient.ogg")
mapDesc([[
################################
################################
################################
################################
################################
################################
################################
################################
################################
################################
################################
################################
################################
################################
##############...###############
##############...###############
##############...###############
################################
################################
################################
################################
################################
################################
################################
################################
################################
################################
################################
################################
################################
################################
################################
]])
spawn("script_entity", 15,13,1, "script1")
	:setSource("--\
-- Example of how to call the DIALOG script\
--\
\
function pressedIt()\
\9DIALOG.DefineDialog([[\
Hello, world!\
\
This is an example of the new dialog system.\
\
Features:\
 - Grimrock style interface\
 - Text slowly appears on screen, as if it told by someone\
 - Optional picture (e.q. the person you talk with)\
 - Dynamic number of buttons\
\
Limitations:\
 - A lot of items are fixed size (window, buttons)\
 - Only support for up to 4 buttons (because of gui)\
 - No automatic wordwrap in text\
 - Party can still move and turn\
\
Still, it's a nice feature, don't you think so?\
]], script1.done)\
\9DIALOG.AddButton(\"Yes\")\
\9DIALOG.AddButton(\"No\")\
\9DIALOG.SetPortrait(\"mod_assets/textures/portrait_ogre.dds\", \"Harold Straus\")\
\9DIALOG.ShowDialog()\
end\
\
function done(response)\
\9hudPrint(\"You chose: \"..response)\
end\
")
spawn("script_entity", 0,0,2, "DIALOG")
	:setSource("--\
-- DIALOG Script\
--\
\
_dialog = nil\
_show = false\
\
\
function DefineDialog(text, callback)\
\9_dialog = { text      = text,\
\9\9\9\9buttons   = {},\
\9\9\9\9callback  = callback,\
\9\9\9\9portrait  = nil,\
\9\9\9\9caption   = nil,\
\9\9\9\9start     = getStatistic(\"play_time\"),\
\9\9\9  }\
end\
\
function AddButton(text)\
\9if _dialog ~= nil then\9\
\9\9table.insert(_dialog.buttons, 1, text)\
\9else\
\9\9print(\"WARNING: trying to add buttons without first defining a dialog\")\
\9end\
end\
\
function SetPortrait(image, caption)\
\9if _dialog ~= nil then\
\9\9_dialog.portrait = image\
\9\9_dialog.caption = caption\
\9else\
\9\9print(\"WARNING: trying to set portrait without first defining a dialog\")\
\9end\
end\
\
function ShowDialog()\
\9if _dialog ~= nil then\9\
\9\9_show = true\
\9else\
\9\9print(\"WARNING: trying to show dialog without first defining a dialog\")\
\9end\
end\
\
\
-------------------\
-- Draw function\
-------------------\
function OnDraw(ctx)\
\9if _dialog ~= nil and _show then\
\9\9-- For now the width and height are fixed\
\9\9local windowWidth = 724\
\9\9local windowHeight = 656\
\
\9\9-- Align window in the middle of the screen\
\9\9-- Exception: small screens, because dialog should not overlap the list of heroes. Align those on the left\
\9\9local x = (ctx.width - windowWidth) / 2\
\9\9if ctx.width <= 1080 then x = 0 end\
\9\9local y = (ctx.height - windowHeight) / 2\
\
\9\9-- Draw the window background\
\9\9ctx.color(255, 255, 255, 255)\
\9\9ctx.drawImage(\"mod_assets/textures/window.tga\", x, y)\
\
\9\9-- Draw the content\
\9\9drawPortrait(ctx, x + 48, y + 64, windowWidth - 48*2, windowHeight - 132)\
\9\9drawText(ctx, x + 48, y + 64, windowWidth - 48*2, windowHeight - 132)\
\
\9\9-- Draw the buttons and check if they're pressed\
\9\9response = drawButtons(ctx, x + 40, y + windowHeight - 54, windowWidth - 40*2, 44)\
\9\9if response ~= nil then\
\9\9\9-- Call the callback function and make sure the dialog is disposed of\
\9\9\9local callback = _dialog.callback\
\9\9\9_show = false\
\9\9\9_dialog = nil\
\9\9\9callback(response)\
\9\9end\
\9end\
end\
\
function drawPortrait(ctx, areaX, areaY, areaWidth, areaHeight)\
\9ctx.color(255, 255, 255, 255)\
\9if _dialog.portrait ~= nil then\
\9\9-- For now all portaits have to me the same size\
\9\9local portraitWidth = 128\
\9\9local portraitHeight = 128\
\9\9\
\9\9-- Determine position of portrait (upper right corner)\
\9\9local portraitX = areaX + areaWidth - portraitWidth\
\9\9local portraitY = areaY;\
\9\9\
\9\9-- Draw image and caption\
\9\9ctx.drawImage(_dialog.portrait, portraitX, portraitY)\
\9\9if _dialog.caption ~= nil then\
\9\9\9ctx.font(\"tiny\")\
\9\9\9local charWidth = 7\
\9\9\9local charHeight = 14\
\9\9\9local captionWidth = charWidth * string.len(_dialog.caption)\
\9\9\9ctx.drawText(_dialog.caption, portraitX + (portraitWidth - captionWidth) / 2, portraitY + portraitHeight + charHeight)\
\9\9end\
\9end\
end\
\
function drawText(ctx, areaX, areaY, areaWidth, areaHeight)\
\9ctx.color(255, 255, 255, 255)\
\9ctx.font(\"medium\")\
\
\9local charHeight = 17\
\9local textLength = math.floor((getStatistic(\"play_time\") - _dialog.start) * 30)\
\9ctx.drawText(string.sub(_dialog.text, 1, textLength), areaX, areaY + charHeight)\
end\
\
function drawButtons(ctx, areaX, areaY, areaWidth, areaHeight)\
\9-- For now all buttons are the same width\
\9local buttonWidth = 148\
\9local buttonHeight = 32\
\9local buttonSpacing = 12\
\9local response = nil\9\9-- Will be filled with the button text if the button is pressed\
\9\
\9-- Set font and (average text size)\
\9ctx.color(255, 255, 255, 255)\
\9ctx.font(\"small\")\
\9local charWidth  = 8\9\9-- Average width of a sinlge character\
\9local charOffsetY = 22\
\
\9for nr, t  in pairs(_dialog.buttons) do\
\9\9-- Draw button\
\9\9local buttonX = areaX + areaWidth - nr * (buttonWidth + buttonSpacing)\
\9\9local buttonY = math.floor(areaY + (areaHeight - buttonHeight) / 2)\
\9\9ctx.drawImage(\"mod_assets/textures/button.tga\", buttonX, buttonY)\
\9\9ctx.drawText(t, buttonX + (buttonWidth - string.len(t) * charWidth)/2, buttonY + charOffsetY)\
\
\9\9-- Check if the button is pressed\
\9\9local pressed = ctx.button(t, buttonX, buttonY, 148, 32)\
\9\9if pressed then\
\9\9\9response = t\
\9\9end\
\9end\
\9return response\
end\
")
spawn("starting_location", 15,16,0, "starting_location")
spawn("dungeon_pressure_plate", 15,15,2, "dungeon_pressure_plate_1")
	:setTriggeredByParty(true)
	:setTriggeredByMonster(true)
	:setTriggeredByItem(true)
	:addConnector("activate", "script1", "pressedIt")
